# Form implementation generated from reading ui file 'sakhalin.ui'
#
# Created by: PyQt6 UI code generator 6.2.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import random
from game_widgets import Ui_Exit_Widget, Ui_Sale_Widget
from _global import Global
import pickle


_global = Global()


class Tile(object):

    def setup_Ui(self, tile):
        tile.isBought = False
        tile.itsBuilding = False
        tile.soil_type = ''
        tile.setIconSize(QtCore.QSize(45, 45))
        tile.setStyleSheet(" border: 0px;")
        
        def __str__(self, soil_type):
            return self.soil_type + ' tile'

        def unpicking():
            _global.picked_tiles.remove(tile)
            tile.setStyleSheet("background-image : url(objs/"+tile.soil_type+".bmp); border: 0px;")
            if tile.isBought:
                tile.setStyleSheet("background-image : url(objs/"+tile.soil_type+".bmp); border: 1px solid #00ff00;")
            if tile.itsBuilding:
                tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid #00ff00;")

        def picking():
            _global.picked_tiles.append(tile)
            tile.setStyleSheet("background-image : url(objs/"+tile.soil_type+".bmp); border: 1px outset blue;")
            if tile.isBought:
                tile.setStyleSheet("background-image : url(objs/"+tile.soil_type+".bmp); border: 1px outset rgb(250,250,0);")
            if tile.itsBuilding:
                tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px outset  rgb(250,250,0);")

        def tile_picking():
            if _global.picked_tiles.count(tile) != 0:
                unpicking()
            else:
                picking()
                print(len(_global.picked_tiles))
    
        tile.clicked.connect(tile_picking)


class Building():
    def __init__(self, icon, price, repair_cost, production_consumption, lifetime, soil, seasons, max_lifetime, daysToBuild, tile):
        self.icon = icon
        self.price = price
        self.repair_cost = repair_cost
        self.production_consumption = production_consumption
        self.lifetime = lifetime
        self.soil = soil
        self.seasons = seasons
        self.tile = tile
        self.max_lifetime = max_lifetime
        self.isFinished = False
        self.daysToBuild = daysToBuild
        
        def __str__(self, icon):
            return self.icon

    def work_time(self):
        if self.seasons == 4:
            return True
        elif self.seasons == 3:
            if _global.date['month'] > 2 and _global.date['month'] < 12:
                return True
            else:
                return False
        elif self.seasons == 2:
            if _global.date['month'] > 5 and _global.date['month'] < 12:
                return True
            else:
                return False
        elif self.seasons == 1:
            if _global.date['month'] > 5 and _global.date['month'] < 9:
                return True
            else:
                return False


class Ui_MainWindow(object):
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(630, 440)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(630, 440))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("objs/icon.bmp"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 640, 401))
        self.frame.setStyleSheet("background-color: black;")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.formLayoutWidget = QtWidgets.QWidget(self.frame)
        self.formLayoutWidget.setGeometry(QtCore.QRect(0, 84, 145, 315))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayoutWidget.setStyleSheet("border: 1px solid white;")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.formLayout.setLabelAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.formLayout.setFormAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.formLayout.setObjectName("formLayout")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setEnabled(True)
        self.statusbar.setStyleSheet("background-color:#252525; color: white; border: 1px solid #e3e3e3;")
        self.statusbar.setObjectName("statusbar")
        self.statusbar.showMessage('Welcome!')
        MainWindow.setStatusBar(self.statusbar)

        def statusbar_message():
            if(len(_global.picked_tiles) < 1):
                self.statusbar.showMessage(str(_global.date['day']) + ' . ' + str(_global.date['month']) + ' . ' + str(_global.date['year']))
            elif(len(_global.picked_tiles) > 1):
                self.statusbar.showMessage(str(len(_global.picked_tiles))+' tiles')
            else:
                if _global.picked_tiles[0].itsBuilding:
                    if _global.picked_tiles[0].itsBuilding.isFinished:
                        self.statusbar.showMessage(_global.picked_tiles[0].itsBuilding.icon + ', ' + str(_global.picked_tiles[0].itsBuilding.lifetime) + ' days left to live')
                    else:
                        self.statusbar.showMessage(_global.picked_tiles[0].itsBuilding.icon + ', ' + str(_global.picked_tiles[0].itsBuilding.daysToBuild) + ' days left to build')
                else:
                    self.statusbar.showMessage(_global.picked_tiles[0].soil_type)

        self.seasonLabel = QtWidgets.QLabel(self.frame)
        self.seasonLabel.setGeometry(QtCore.QRect(-1, -1, 146, 87))
        self.seasonLabel.setStyleSheet("border: 1px solid white; color: rgb(255,244,244)")
        self.seasonLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.seasonLabel.setPixmap(QtGui.QPixmap("objs/spring.bmp"))
        self.seasonLabel.setToolTip('<div style="background-color:black; color: white" >Spring</div>')
        self.textBrowser = QtWidgets.QTextBrowser(self.frame)
        self.textBrowser.setGeometry(QtCore.QRect(540, 10, 83, 24))
        self.textBrowser.setStyleSheet("color: white; border: 0px")
        self.textBrowser.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.textBrowser.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.textBrowser.setObjectName("textBrowser")

        def left_tab_init():
            # for el in range(10):
            #     if len(_global.goods_dict["icons"]):
            #        _global.goods_dict["icons"][el].close()
            #        _global.goods_dict["amounts"][el].close()
            # _global.goods_dict["icons"].clear()
            # _global.goods_dict["amounts"].clear()
            for el in range(10):
                _global.goods_dict["icons"].append(QtWidgets.QLabel(self.formLayoutWidget))
                _global.goods_dict["icons"][el].setPixmap(QtGui.QPixmap("objs/"+_global.GOODS_NAME[el]+".bmp"))
                _global.goods_dict["icons"][el].setObjectName(_global.GOODS_NAME[el]+"_icon")
                _global.goods_dict["icons"][el].setStyleSheet("border: 0px; color: white;")
                _global.goods_dict["icons"][el].setToolTip('<div>'+_global.GOODS_NAME[el]+'</div>')
                self.formLayout.setWidget(el, QtWidgets.QFormLayout.ItemRole.LabelRole, _global.goods_dict["icons"][el])

                _global.goods_dict["amounts"].append(QtWidgets.QLineEdit(self.formLayoutWidget))
                _global.goods_dict["amounts"][el].setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
                _global.goods_dict["amounts"][el].setAutoFillBackground(False)
                _global.goods_dict["amounts"][el].setStyleSheet("color: white;\n border: 0px;")
                _global.goods_dict["amounts"][el].setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
                _global.goods_dict["amounts"][el].setReadOnly(True)
                _global.goods_dict["amounts"][el].setObjectName("moneyLineEdit")
                _global.goods_dict["amounts"][el].setText(_global.capital[el])
                _global.goods_dict["amounts"][el].setToolTip(_global.GOODS_NAME[el])

                self.formLayout.setWidget(el, QtWidgets.QFormLayout.ItemRole.FieldRole, _global.goods_dict["amounts"][el])
            print(len(_global.goods_dict["amounts"]))
        left_tab_init()

        self.Tiles_area = QtWidgets.QWidget(self.frame)
        self.Tiles_area.setGeometry(QtCore.QRect(140, 80, 491, 321))
        self.Tiles_area.setObjectName("Tiles_area")
        self.Tiles_area.setStyleSheet("background-color: rgb(54,160,84); margin: 5px; border: 1px solid white ")
        self.gridLayout = QtWidgets.QGridLayout(self.Tiles_area)
        self.gridLayout.setObjectName("gridLayout")
        
        # CREATING THE MAP 
        
        def tiles_area_init():
            for y in range(12):
                for x in range(18):            
                    _global.tiles[y+1].append(QtWidgets.QToolButton(self.Tiles_area)) 
                    ui_button = Tile()
                    ui_button.setup_Ui(_global.tiles[y+1][x])
                    _global.tiles[y+1][x].show()
                    _global.tiles[y+1][x].setGeometry(QtCore.QRect(x*26, y*25+2, 35, 35))
                    _global.tiles[y+1][x].clicked.connect(statusbar_message)
                    rnd = random.random()
                    if (rnd <= 20/216):
                        _global.tiles[y+1][x].soil_type = _global.SOIL_TYPE[0]
                        _global.tiles[y+1][x].setStyleSheet("background-color: white ; background-image : url(objs/"+_global.SOIL_TYPE[0]+".bmp); border: 0px;")
                    elif (20/216 < rnd <= 26/216): 
                        _global.tiles[y+1][x].soil_type = _global.SOIL_TYPE[1]
                        _global.tiles[y+1][x].setStyleSheet("background-image : url(objs/"+_global.SOIL_TYPE[1]+".bmp); border: 0px;")
                    elif (26/216 < rnd <= 31/216): 
                        _global.tiles[y+1][x].soil_type = _global.SOIL_TYPE[2]
                        _global.tiles[y+1][x].setStyleSheet("background-image : url(objs/"+_global.SOIL_TYPE[2]+".bmp); border: 0px;")
                    elif (31/216 < rnd <= 44/216): 
                        _global.tiles[y+1][x].soil_type = _global.SOIL_TYPE[3]
                        _global.tiles[y+1][x].setStyleSheet("background-image : url(objs/"+_global.SOIL_TYPE[3]+".bmp); border: 0px;")
                    elif (44/216 < rnd <= 99/216): 
                        _global.tiles[y+1][x].soil_type = _global.SOIL_TYPE[4]
                        _global.tiles[y+1][x].setStyleSheet("background-image : url(objs/"+_global.SOIL_TYPE[4]+".bmp); border: 0px;")  
                    elif (99/216 < rnd <= 143/216):
                        _global.tiles[y+1][x].soil_type = _global.SOIL_TYPE[5]
                        _global.tiles[y+1][x].setStyleSheet("background-image : url(objs/"+_global.SOIL_TYPE[5]+".bmp); border: 0px;")
            y = random.randint(1, 12)
            x = random.randint(0, 17)
            my_building = Building(_global.BUILDING[0], 0, 42, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 4000, '', 4, 4000, 0, _global.tiles[y][x])
            _global.my_buildings.append(my_building)
            _global.tiles[y][x].itsBuilding = _global.my_buildings[0]
            _global.tiles[y][x].isBought = True
            _global.tiles[y][x].itsBuilding.isFinished = True
            _global.tiles[y][x].setStyleSheet("background-image : url(objs/"+_global.tiles[y][x].itsBuilding.icon+".bmp); border: 1px solid rgb(0,255,0);")
            return _global.tiles[y][x]

        base_tile = []
        base_tile.append(tiles_area_init())

        # END OF CREATING THE MAP

        #BUTTONS

        for el in range(19):
            _global.buttons.append(QtWidgets.QPushButton(self.frame))
            _global.buttons[el].setGeometry(QtCore.QRect(160+(((el)//2)*30)+((el)//10)*20,(30*(el%2))+10, 25, 25))
            _global.buttons[el].setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            _global.buttons[el].setStyleSheet("background-image : url(objs/"+_global.button_icons[el]+".bmp); border: 0px;")
            _global.buttons[el].setShortcut(_global.hot_keys[el])
            _global.buttons[el].setToolTip('<div style="background-color:black; color: white ; border: 5px ;">'+_global.button_icons[el]+'</div>')

        for el in range(3):
            _global.buttons.append(QtWidgets.QPushButton(self.frame))
            _global.buttons[el+19].setGeometry(QtCore.QRect(520+el*30, 40, 25, 25))
            _global.buttons[el+19].setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
            _global.buttons[el+19].setStyleSheet("background-image : url(objs/"+_global.button_icons[el+19]+".bmp); border: 0px;")
            _global.buttons[el+19].setShortcut(_global.hot_keys[el+19])

             # DATE PART

        self.date_label = QtWidgets.QLabel(self.frame)
        self.date_label.setGeometry(QtCore.QRect(525, 15, 80, 15))
        self.date_label.setStyleSheet("color: white")
        self.date_label.setText(str(_global.date['day']) + ' . ' + str(_global.date['month']) + ' . ' + str(_global.date['year']))

        def  production():
            for building in _global.my_buildings:
                if building.isFinished:
                    if building.work_time():
                        permission = True
                        for el in range(10):
                            if (int(_global.capital[el]) + building.production_consumption[el]) < 0:
                                permission = False
                        if(permission):
                            for el in range(10):
                                _global.capital[el] = str(int(_global.capital[el]) + building.production_consumption[el])
                    building.lifetime -= 1
                    if building.lifetime == 0:
                        building.tile.setStyleSheet("background-image : url(objs/"+building.tile.soil_type+".bmp); border: 1px solid rgb(0,255,0);")
                        building.tile.itsBuilding = False
                        if _global.picked_tiles.count(building.tile):
                            _global.picked_tiles.remove(building.tile)
                        _global.my_buildings.remove(building)
                else:
                    building.daysToBuild = building.daysToBuild - 1
                    if building.daysToBuild == 0:
                        building.isFinished = True

        def game_over_check():
            if not base_tile[-1].itsBuilding:
                game_over.show()
 
        def next_season():
            if _global.date['month'] == 3:
                self.seasonLabel.setPixmap(QtGui.QPixmap("objs/spring.bmp"))
                self.seasonLabel.setToolTip('<div style="color: white" >Spring</div>')
            elif _global.date['month'] == 6:
                self.seasonLabel.setPixmap(QtGui.QPixmap("objs/summer.bmp"))
                self.seasonLabel.setToolTip('<div style="color: white" >Summer</div>')
            elif _global.date['month'] == 9:
                self.seasonLabel.setPixmap(QtGui.QPixmap("objs/autumm.bmp"))
                self.seasonLabel.setToolTip('<div style="color: white" >Autumm</div>')
            elif _global.date['month'] == 12:
                self.seasonLabel.setPixmap(QtGui.QPixmap("objs/winter.bmp"))
                self.seasonLabel.setToolTip('<div style="color: white" >Winter</div>')

        def next_day():
            game_over_check()
            production()
            if _global.date['day'] == 30:
                _global.date['day'] = 1
                if _global.date['month'] == 12:
                    _global.date['month'] = 1
                    _global.date['year'] += 1
                else:
                    _global.date['month'] += 1
                    next_season()
            else:
                _global.date['day'] += 1
            self.date_label.setText(str(_global.date['day']) + ' . ' + str(_global.date['month']) + ' . ' + str(_global.date['year']))
            left_tab_init()
            statusbar_message()

        def next_week():
            for i in range(7):
                next_day()

        def next_month():
            for i in range(30):
                next_day()

            # END OF DATE PART

            # THE BUTTONS-FUNCIONS BLOCK:

        def tile_purchase():
            for tile in _global.picked_tiles:
                if not tile.isBought and int(_global.capital[0]) >= 9000:
                    tile.isBought = True
                    tile.setStyleSheet("background-image : url(objs/"+tile.soil_type+".bmp); border: 1px solid rgb(0,255,0);")
                    _global.picked_tiles.remove(tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 9000)
            left_tab_init()

        def tile_sale():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding:
                    tile.isBought = False
                    tile.setStyleSheet("background-image : url(objs/"+tile.soil_type+".bmp); border: 0px")
                    _global.picked_tiles.remove(tile)
                    _global.capital[0] = str(int(_global.capital[0]) + 8000)
            left_tab_init()

        def destroy():
            for tile in _global.picked_tiles:
                if tile.itsBuilding:
                    tile.itsBuilding = False
                    tile.setStyleSheet("background-image : url(objs/"+tile.soil_type+".bmp); border: 1px solid rgb(0,255,0);")
                    _global.picked_tiles.remove(tile)
                    for building in _global.my_buildings:
                        if building.tile == tile:
                            _global.my_buildings.remove(building)
            statusbar_message()                          

        def repair():
            for tile in _global.picked_tiles:

                def remont():
                    while (tile.itsBuilding.max_lifetime != tile.itsBuilding.lifetime):
                        if (int(_global.capital[0]) - tile.itsBuilding.repair_cost) >= 0:
                            _global.capital[0] = str(int(_global.capital[0]) - tile.itsBuilding.repair_cost)
                            tile.itsBuilding.lifetime += 1
                        else:
                            break
                    if(tile.itsBuilding.max_lifetime == tile.itsBuilding.lifetime):
                        tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid rgb(0,255,0);")
                        _global.picked_tiles.remove(tile)

                if (tile.itsBuilding):
                    remont()
                else:
                    tile.setStyleSheet("background-image : url(objs/"+tile.soil_type+".bmp); border: 0px;")
                    if(tile.isBought):
                        tile.setStyleSheet("background-image : url(objs/"+tile.soil_type+".bmp); border: 1px solid rgb(0,255,0);")
                    _global.picked_tiles.remove(tile)
            left_tab_init()
            statusbar_message()

        def search():
            if not len(_global.picked_tiles):
                weakest = False
                x = 4000
                for el in _global.my_buildings:
                    if el.max_lifetime != el.lifetime and el.lifetime < x:
                        x = el.lifetime
                        weakest = el
                if not weakest:
                    pass
                else:
                    weakest.tile.setStyleSheet("background-image : url(objs/"+weakest.icon+".bmp); border: 1px outset  rgb(250,250,0);")
                    _global.picked_tiles.append(weakest.tile)
                statusbar_message()

        def sale():
            sale_widget = QtWidgets.QDialog(MainWindow)
            ui_sale = Ui_Sale_Widget()
            ui_sale.setupUi(sale_widget, _global.SELL_PRICE, "Sell", _global)
            sale_widget.show()
            sale_widget.finished.connect(left_tab_init)

        def buy():
            buy_widget = QtWidgets.QDialog(MainWindow)
            ui_buy = Ui_Sale_Widget()
            ui_buy.setupUi(buy_widget, _global.BUY_PRICE, "Buy", _global)
            buy_widget.show()
            buy_widget.finished.connect(left_tab_init)

                # THE BUILDING-FUNCTIONS BLOCK:

        def buy_farm():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and int(_global.capital[0]) >= 15500:
                    my_building = Building(_global.BUILDING[1], 15500, 10, [0, 0, 38, 0, 0, 0, 0, -2, 0, 0], 1200, '', 3, 1200, 38, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 15500)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid #00ff00;")
                    _global.picked_tiles.remove(tile)
            left_tab_init()
            statusbar_message()

        def buy_quarry():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and tile.soil_type == _global.SOIL_TYPE[3] and int(_global.capital[0]) >= 20200:
                    my_building = Building(_global.BUILDING[2], 20200, 14, [0, 0, 0, 0, 8, -8, 30, 0, 0, 0], 1200, 'iron_soil', 1, 1200, 36, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 20200)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid rgb(0,255,0);")
                    _global.picked_tiles.remove(tile)
            left_tab_init()
            statusbar_message()

        def buy_garden():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and int(_global.capital[0]) >= 18000:
                    my_building = Building(_global.BUILDING[3], 18000, 4, [0, 0, 20, 0, 0, 0, 0, -1, 0, 0], 3800, '', 2, 3800, 20, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 18000)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid rgb(0,255,0);")
                    _global.picked_tiles.remove(tile)
            left_tab_init()
            statusbar_message()

        def buy_oil_production():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and tile.soil_type == _global.SOIL_TYPE[1] and int(_global.capital[0]) >= 57500 :
                    my_building = Building(_global.BUILDING[4], 57500, 47, [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], 900, _global.SOIL_TYPE[1], 1, 900, 46, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 57500)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid #00ff00;")
                    _global.picked_tiles.remove(tile)
            left_tab_init()
            statusbar_message()

        def buy_waterpipes():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and tile.soil_type == _global.SOIL_TYPE[5] and int(_global.capital[0]) >= 8100:
                    my_building = Building(_global.BUILDING[5], 8100, 7, [0, 0, 0, 0, 0, 0, 0, 4, 0, 0], 900, _global.SOIL_TYPE[5], 3, 900, 46, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 8100)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid rgb(0,255,0);")
                    _global.picked_tiles.remove(tile)
            left_tab_init()
            statusbar_message()

        def buy_goldmine():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and tile.soil_type == _global.SOIL_TYPE[2] and int(_global.capital[0]) >= 132000:
                    my_building = Building(_global.BUILDING[6], 132000, 110, [0, 2, 0, 0, 0, 0, 100, -200, 0, 0], 900, _global.SOIL_TYPE[2], 1, 900, 20, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 132000)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid #00ff00;")
                    _global.picked_tiles.remove(tile)
            left_tab_init()
            statusbar_message()

        def buy_sawmill():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and tile.soil_type == _global.SOIL_TYPE[4] and int(_global.capital[0]) >= 35500:
                    my_building = Building(_global.BUILDING[7], 35500, 29, [0, 0, 0, 0, -1, -2, 0, 0, 18, 0], 900, _global.SOIL_TYPE[4], 4, 900, 10, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 35500)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid #00ff00;")
                    _global.picked_tiles.remove(tile)
            left_tab_init()
            statusbar_message()

        def buy_powerstation():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and int(_global.capital[0]) >= 23000:
                    my_building = Building(_global.BUILDING[8], 23000, 11, [0, 0, 0, 0, 0, -1, 0, 0, 0, 2], 1600, '', 4, 1600, 65, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 23000)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid #00ff00;")
                    _global.picked_tiles.remove(tile)
            left_tab_init()  
            statusbar_message()

        def buy_mine():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and tile.soil_type == _global.SOIL_TYPE[0] and int(_global.capital[0]) >= 63000:
                    my_building = Building(_global.BUILDING[9], 63000, 40, [0, 0, 0, 4, 0, 0, 20, 0, -2, -2], 1200, _global.SOIL_TYPE[0], 4, 1200, 68, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 63000)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid #00ff00;")
                    _global.picked_tiles.remove(tile)
            left_tab_init() 
            statusbar_message()

        def buy_hydrostation():
            for tile in _global.picked_tiles:
                if tile.isBought and not tile.itsBuilding and tile.soil_type == _global.SOIL_TYPE[5] and int(_global.capital[0]) >= 71500:
                    my_building = Building(_global.BUILDING[10], 71500, 17, [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 3200, _global.SOIL_TYPE[5], 4, 3200, 100, tile)
                    _global.capital[0] = str(int(_global.capital[0]) - 71500)
                    _global.my_buildings.append(my_building)
                    tile.itsBuilding = my_building
                    tile.setStyleSheet("background-image : url(objs/"+tile.itsBuilding.icon+".bmp); border: 1px solid #00ff00;")
                    _global.picked_tiles.remove(tile)
            left_tab_init() 
            statusbar_message()

                # END OF THE BUILDINGS-FUNCTIONS BLOCK

            # END OF THE BUTTONS-FUNCTIONS BLOCK

        _global.buttons[0].clicked.connect(buy_farm)
        _global.buttons[1].clicked.connect(buy_quarry)
        _global.buttons[2].clicked.connect(buy_garden)
        _global.buttons[3].clicked.connect(buy_oil_production)
        _global.buttons[4].clicked.connect(buy_waterpipes)
        _global.buttons[5].clicked.connect(buy_goldmine)
        _global.buttons[6].clicked.connect(buy_sawmill)
        _global.buttons[7].clicked.connect(buy_powerstation)
        _global.buttons[8].clicked.connect(buy_mine)
        _global.buttons[9].clicked.connect(buy_hydrostation)        
        _global.buttons[10].clicked.connect(sale)
        _global.buttons[11].clicked.connect(buy)
        _global.buttons[12].clicked.connect(tile_sale)
        _global.buttons[13].clicked.connect(tile_purchase)
        _global.buttons[14].clicked.connect(destroy)
        _global.buttons[17].clicked.connect(repair)
        _global.buttons[18].clicked.connect(search)
        _global.buttons[19].clicked.connect(next_day)
        _global.buttons[20].clicked.connect(next_week)
        _global.buttons[21].clicked.connect(next_month)

        # END OF BUTTONS

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 630, 21))
        self.menubar.setObjectName("menubar")
        self.menuGame = QtWidgets.QMenu(self.menubar)
        self.menuGame.setObjectName("menuGame")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)

        def new_game():
            _global.picked_tiles.clear()
            _global.my_buildings.clear()
            for y in range(12):
                for x in range(18):
                    _global.tiles[y+1][x].close()
                _global.tiles[y+1].clear()
            base_tile.clear()
            base_tile.append(tiles_area_init())
            _global.capital = ['50000', '0', '0', '0', '0', '0', '0', '0', '0', '0']
            _global.date = {'day': 1, 'month': 3, 'year': 1890}
            next_season()
            left_tab_init()
            self.date_label.setText(str(_global.date['day']) + ' . ' + str(_global.date['month']) + ' . ' + str(_global.date['year']))
            statusbar_message()

        def save_game():
            with open('save.dat', 'wb') as save:
                pickle.dump([_global.capital, _global.date], save, protocol=5)
            save.close()
            
        def load_game():
            with open('save.dat', 'rb') as save:
                _global.capital, _global.date = pickle.load(save)
            save.close()
            left_tab_init()
            self.date_label.setText(str(_global.date['day']) + ' . ' + str(_global.date['month']) + ' . ' + str(_global.date['year']))

        question = QtWidgets.QDialog(MainWindow)
        ui = Ui_Exit_Widget()
        ui.setupUi(question, 1)
        question.accepted.connect(MainWindow.close)

        game_over = QtWidgets.QDialog(MainWindow)
        ui = Ui_Exit_Widget()
        ui.setupUi(game_over, 2)
        game_over.accepted.connect(new_game)
        game_over.rejected.connect(MainWindow.close)

        self.action = QtGui.QAction(MainWindow)
        self.action.setObjectName("action")
        self.action.setShortcut("Ctrl+N")
        self.action.triggered.connect(new_game)
        self.action_2 = QtGui.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_2.setShortcut("Ctrl+L")
        self.action_2.triggered.connect(load_game)
        self.action_3 = QtGui.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.action_3.setShortcut("Ctrl+S")
        self.action_3.triggered.connect(save_game)
        self.action_5 = QtGui.QAction(MainWindow)
        self.action_5.setObjectName("action_5")
        self.action_5.setCheckable(True)
        self.action_5.setChecked(True)
        self.action_5.setShortcut("Alt+S")
        self.action_7 = QtGui.QAction(MainWindow)
        self.action_7.setObjectName("action_7")
        self.action_7.setShortcut("Ctrl+Q")
        self.action_7.triggered.connect(question.show)
        self.actionHelf = QtGui.QAction(MainWindow)
        self.actionHelf.setObjectName("actionHelf")
        self.actionAbout = QtGui.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.menuGame.addAction(self.action)
        self.menuGame.addAction(self.action_2)
        self.menuGame.addAction(self.action_3)
        self.menuGame.addSeparator()
        self.menuGame.addAction(self.action_5)
        self.menuGame.addSeparator()
        self.menuGame.addAction(self.action_7)
        self.menu.addAction(self.actionHelf)
        self.menu.addSeparator()
        self.menu.addAction(self.actionAbout)
        self.menubar.addAction(self.menuGame.menuAction())
        self.menubar.addAction(self.menu.menuAction())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sakhalin"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">01.03.1890</p></body></html>"))
        self.menuGame.setTitle(_translate("MainWindow", "Game"))
        self.menu.setTitle(_translate("MainWindow", "?"))
        self.action.setText(_translate("MainWindow", "New game"))
        self.action_2.setText(_translate("MainWindow", "Load"))
        self.action_3.setText(_translate("MainWindow", "Save"))
        self.action_5.setText(_translate("MainWindow", "Sound"))
        self.action_7.setText(_translate("MainWindow", "Exit"))
        self.actionHelf.setText(_translate("MainWindow", "Help"))
        self.actionAbout.setText(_translate("MainWindow", "About"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
